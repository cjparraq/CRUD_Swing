
package Vista;

import Config.Company;
import Config.DBConnection;
import Config.Employee;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;

public class CompanyGUI extends javax.swing.JFrame {

    public static Company c1;
    public static Object[][] data;
    public static TableModel modelo; // Para poder ir actualizando la tabla en memoria
    public static String[] columnas = {"DNI", "NAME", "DEPENDENCY", "DATE", "FILE"};
   
    
    public CompanyGUI() {
        c1 = new Company();
        initComponents();
        this.getContentPane().setBackground(Color.white); // fondo de la ventana blanco
        setLocationRelativeTo(null); // que salga en el centro de la pantalla
        
        //*************Iniciar la memoria haciendo una consulta a la base*****************
        
        DBConnection cn = new DBConnection();//Objeto de la clase de conexion a BD
        Connection con = cn.getConnection();//Objeto Connection
        String sql = "SELECT * FROM Employee"; //CommandSQL para consultar
        try {
            PreparedStatement ps = con.prepareStatement(sql); //declaro el CommandSQL en la clase connection
            ResultSet employees = ps.executeQuery();
            while(employees.next()){
                java.sql.Date dateTemp = employees.getDate("Date");//conversion fechas SQL/java
                Employee m = new Employee(employees.getLong("DNI"),employees.getString("Name"), employees.getString("Dependence"), new java.util.Date(dateTemp.getTime()) ,employees.getString("File"));
                Company.getPerson().add(m);//Adiciona los elementos traido de la base a la tabla en memoria
            }
            con.close();//Termina conexión con la base
            JOptionPane.showMessageDialog(null, "Finaliza conexion con BD", "Conexion", JOptionPane.INFORMATION_MESSAGE);
            this.actualizarModelo();//actualiza tabla en memoria
        } catch (SQLException ex) {
            Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //******************************************
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TxtName = new javax.swing.JTextField();
        TxtDependency = new javax.swing.JTextField();
        BtnOpenFile = new javax.swing.JButton();
        BtnInsert = new javax.swing.JButton();
        TxtFileLoad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TxtDni = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        TxtInsertDNI = new javax.swing.JTextField();
        BtnRead = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        BtnDownload = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRUD_Company");

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("DNI:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Dependency:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Date:");

        BtnOpenFile.setBackground(new java.awt.Color(255, 255, 255));
        BtnOpenFile.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnOpenFile.setText("Open file");
        BtnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnOpenFileActionPerformed(evt);
            }
        });

        BtnInsert.setBackground(new java.awt.Color(255, 255, 255));
        BtnInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnInsert.setText("Insert");
        BtnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInsertActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("File load:");

        TxtDni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Automático");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtDni))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtDependency, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BtnOpenFile)
                            .addComponent(TxtFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                .addGap(2, 2, 2)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtDependency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtFileLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(BtnOpenFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnInsert)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Insert DNI: ");

        BtnRead.setBackground(new java.awt.Color(255, 255, 255));
        BtnRead.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnRead.setText("Read");
        BtnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReadActionPerformed(evt);
            }
        });

        BtnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        BtnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnUpdate.setText("Update");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(255, 255, 255));
        BtnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnDelete.setText("Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        BtnDownload.setBackground(new java.awt.Color(255, 255, 255));
        BtnDownload.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BtnDownload.setText("Download file");
        BtnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDownloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnRead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtInsertDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TxtInsertDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnRead)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnDownload)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        data = c1.queryResult();
        modelo = new DefaultTableModel(data,columnas);
        table.setModel(modelo);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("CRUD - EMPLOYEE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnOpenFileActionPerformed
        new OpenGUI(this.TxtFileLoad).setVisible(true); //Abrir ventana de open file
        
    }//GEN-LAST:event_BtnOpenFileActionPerformed

    private void BtnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInsertActionPerformed
        String dni = TxtDni.getText(); //Obtener informacion ingresada de la interfaz
        String name = TxtName.getText(); //Obtener informacion ingresada de la interfaz
        String dependency = TxtDependency.getText();//Obtener informacion ingresada de la interfaz
        String filePath = TxtFileLoad.getText();//Obtener informacion ingresada de la interfaz
        File rawFile = new File(filePath);//Leyendo el archivo 
        String contentFile = null;
        InputStream targetStream = null;
        try {
            targetStream = new FileInputStream(rawFile); // Archivo en bytes
            contentFile = new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8); //Archivo String
        } catch (IOException ex) {
            Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject file = null;
        file = new JSONObject(contentFile); //Leyendo el String y creandolo como objeto JSON
        
        //*************Enviar a base*****************
        DBConnection cn = new DBConnection();
        Connection con = cn.getConnection();
        java.util.Date date = new java.util.Date();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
        String encoded = Base64.getEncoder().encodeToString(file.toString().getBytes()); // Archivo codificado
        
        String sql = "INSERT INTO Employee VALUES (?,?,?,?,?,?,?)";//Command SQL para enviar datos a BD
        try {
            int len = (int)rawFile.length();
            
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, dni);
            ps.setString(2, name);
            ps.setString(3, dependency);
            ps.setTimestamp(4, timestamp);
            ps.setString(5, file.toString());
            ps.setBinaryStream(6, targetStream, len);
            ps.setString(7, encoded);
            ps.execute();
            con.close();//Termina conexión
            JOptionPane.showMessageDialog(null, "Finaliza conexion con BD", "Conexion", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //******************************************

        c1.Insert(Long.parseLong(dni) ,name, dependency, date, file.toString());//Enviar la informacion al metodo agregar 
        JOptionPane.showMessageDialog(this, "Empleado agregado con exito");
        actualizarModelo();
        TxtDni.setText("");//Deja todo en vacio
        TxtName.setText("");
        TxtDependency.setText("");
        TxtFileLoad.setText("");
    }//GEN-LAST:event_BtnInsertActionPerformed

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        
       int id = (int) table.getValueAt(table.getSelectedRow(), 0);
        Object[][] persona = c1.searchID(id);
        TxtDni.setText((String) persona[0][1]);
        TxtName.setText((String) persona[0][2]);
        TxtDependency.setText((String) persona[0][3]);
    }//GEN-LAST:event_tableMousePressed

    private void BtnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReadActionPerformed
        try {
            long idBuscar = Long.parseLong(TxtInsertDNI.getText());
            Object[][] persona = c1.searchID(idBuscar);//buscar DNI ingresado en memoria
        
            if(persona [0][0] == null){
                JOptionPane.showMessageDialog(this, "Informacion de empleado no existe");
            }
            else{
                JOptionPane.showMessageDialog(this, "Empleado encontrado");
                java.util.Date date = new java.util.Date();
                java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
                
                TxtDni.setText( String.valueOf(persona[0][0]));//envia la informacion encontrada a los Jtext
                TxtName.setText( (String)persona[0][1]);
                TxtDependency.setText((String) persona[0][2]);
                TxtFileLoad.setText((String) persona[0][4]);
                
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Valor ingresador no es un DNI");
        }   
    }//GEN-LAST:event_BtnReadActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        //*************Borrar registro base*****************
        DBConnection cn = new DBConnection();
        Connection con = cn.getConnection();
        java.util.Date date = new java.util.Date();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
        
        String sql = "DELETE FROM Employee WHERE DNI = ?";
        try {
            long dni = Long.parseLong(TxtDni.getText());
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, dni);
            ps.executeUpdate();
            con.close();//Termina conexión
            JOptionPane.showMessageDialog(null, "Finaliza conexion con BD", "Conexion", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //******************************************
        
        try {
            int idBuscar = Integer.parseInt(TxtInsertDNI.getText());
            Object[][] persona = c1.searchID(idBuscar);
        
            if(persona [0][0] == null){
                JOptionPane.showMessageDialog(this, "Empleado no existe");
            }
            else{
                JOptionPane.showMessageDialog(this, "Empleado eliminado");
                c1.Delete(idBuscar);
                actualizarModelo();
                TxtDni.setText("");//Deja todo en vacio
                TxtName.setText("");
                TxtDependency.setText("");
                TxtFileLoad.setText("");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Valor ingresador no es un DNI");
        }
        
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        try {
            long idBuscar = Long.parseLong(TxtInsertDNI.getText());
            Object[][] persona = c1.searchID(idBuscar);
        
            if(persona [0][0] == null){
                JOptionPane.showMessageDialog(this, "Empleado no existe");
            }
            else{
                
                String dni = TxtDni.getText(); //Obtener informacion ingresada de la interfaz
                String name = TxtName.getText();//Obtener informacion ingresada de la interfaz
                String dependency = TxtDependency.getText();//Obtener informacion ingresada de la interfaz
                String file = TxtFileLoad.getText();//Obtener informacion ingresada de la interfaz
                
                java.util.Date date = new java.util.Date();
                java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
                c1.Update(idBuscar, name, dependency, timestamp, file);
                JOptionPane.showMessageDialog(this, "Información de empleado modificada con exito");
                actualizarModelo();
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Valor ingresador no es un DNI");
        }
        
        //*************Actualizar base*****************
        DBConnection cn = new DBConnection();
        Connection con = cn.getConnection();
        java.util.Date date = new java.util.Date();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
        
        String sql = "UPDATE Employee SET DNI=?,Name=?,Dependence=?,Date=?,File=?  WHERE DNI = ?";
        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, TxtDni.getText());
            ps.setString(2, TxtName.getText());
            ps.setString(3, TxtDependency.getText());
            ps.setTimestamp(4, timestamp);
            ps.setString(5, TxtFileLoad.getText());
            ps.setString(6, TxtDni.getText());
            ps.executeUpdate();
            con.close();//Termina conexión
            
        } catch (SQLException ex) {
            Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //******************************************
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void BtnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDownloadActionPerformed

        try {
            int idBuscar = Integer.parseInt(TxtInsertDNI.getText()); //obtner id en entero
            Object[][] persona = c1.searchID(idBuscar);//busca el ID en la memoria
            
            DBConnection cn = new DBConnection();//Objeto de la clase de conexion a BD
            Connection con = cn.getConnection();//Objeto Connection
            byte[] blob =  null;
            String encoded = null;
            String sql = "SELECT RawFile, encodeFile FROM Employee WHERE DNI = ?"; //CommandSQL para consultar
            try {
                PreparedStatement ps = con.prepareStatement(sql); //declaro el CommandSQL en la clase connection
                ps.setLong(1, Long.parseLong(TxtInsertDNI.getText()));
                ResultSet employees = ps.executeQuery();
                employees.next();
                blob = employees.getBytes("RawFile");//Se asigna en byte
                encoded = employees.getString("encodeFile");//Se asigna en String
                con.close();//Termina conexión con la base
                JOptionPane.showMessageDialog(null, "Finaliza conexion con BD", "Conexion", JOptionPane.INFORMATION_MESSAGE);
                this.actualizarModelo();//actualiza tabla en memoria
            } catch (SQLException ex) {
                Logger.getLogger(CompanyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(persona [0][0] == null){
                JOptionPane.showMessageDialog(this, "Empleado no existe");
            }
            else{
                byte[] decoded = Base64.getDecoder().decode(encoded);//Deodificando base64 a Byte
                String fileName = "C:\\Users\\Cristian\\Desktop\\"+TxtDni.getText()+".xml"; //Ruta donde se va a descargar
                
                //String RawFile = new String(blob);//Arreglo de byte a string
                String RawFileDecode = new String(decoded);
                
                JSONObject RawFileDecodejson = new JSONObject(RawFileDecode); //Crea un objeto JSON con el archivo String
                String xmlDecode = XML.toString(RawFileDecodejson);//convierte json a xml
                
//                JSONObject json = new JSONObject(RawFile); //Crea un objeto JSON con la info de la ruta
//                String xml = XML.toString(json);//convierte json a xml
                try {
                    // Creates a FileWriter
                    FileWriter outputDecode = new FileWriter(fileName);//crea un objeto de la libreria
                    outputDecode.write(xmlDecode);//Escribe el xml
                    outputDecode.close();//Termina de escribir
                    
                } catch (Exception e) {
                    
                }
       
            }
            
        } catch (HeadlessException | NumberFormatException | JSONException e) {
            JOptionPane.showMessageDialog(this, "Valor ingresador no es un DNI");
        }
    }//GEN-LAST:event_BtnDownloadActionPerformed

    public void actualizarModelo(){
        data = c1.queryResult(); //actualiar la data
        modelo = new DefaultTableModel(data, columnas); //actualiza el modelo
        table.setModel(modelo);//actualiza la tabla
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompanyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompanyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompanyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompanyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompanyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnDownload;
    private javax.swing.JButton BtnInsert;
    private javax.swing.JButton BtnOpenFile;
    private javax.swing.JButton BtnRead;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTextField TxtDependency;
    private javax.swing.JFormattedTextField TxtDni;
    private javax.swing.JTextField TxtFileLoad;
    private javax.swing.JTextField TxtInsertDNI;
    private javax.swing.JTextField TxtName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
